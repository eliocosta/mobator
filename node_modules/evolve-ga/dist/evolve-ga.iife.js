var EvolveGA = (function (exports) {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  var mutationFunction = function mutationFunction(chromosome, possibleGenes) {
    var mutatedGenes = _toConsumableArray(chromosome.genes);

    var geneToMutateIndex = Math.floor(Math.random() * mutatedGenes.length);
    var possibleGenesFiltered = possibleGenes.filter(function (gene) {
      return gene !== mutatedGenes[geneToMutateIndex];
    });
    mutatedGenes[geneToMutateIndex] = possibleGenesFiltered[Math.floor(Math.random() * possibleGenesFiltered.length)];
    return {
      fitness: chromosome.fitness,
      genes: mutatedGenes
    };
  };

  var crossOverFunction = function crossOverFunction(chromosomes) {
    var offspring = [];

    for (var i = 0; i < chromosomes.length; i++) {
      var crossOverPoint = Math.floor(Math.random() * chromosomes[i].genes.length);
      var parentA = chromosomes[Math.floor(Math.random() * chromosomes.length)];
      var parentB = chromosomes[Math.floor(Math.random() * chromosomes.length)];
      offspring[i] = {
        fitness: 0,
        genes: [].concat(_toConsumableArray(parentA.genes.slice(0, crossOverPoint)), _toConsumableArray(parentB.genes.slice(crossOverPoint)))
      };
    }

    return offspring;
  };

  var selectionFunction = function selectionFunction(chromosomes) {
    return chromosomes.sort(function (a, b) {
      return b.fitness - a.fitness;
    }).slice(0, Math.ceil(chromosomes.length / 2));
  };

  var fitnessFunction = function fitnessFunction() {
    return 0;
  };

  var defaultConfig = {
    fitnessFunction: fitnessFunction,
    selectionFunction: selectionFunction,
    crossOverFunction: crossOverFunction,
    mutationFunction: mutationFunction,
    populationSize: 10000,
    chromosomeLength: 100,
    possibleGenes: [0, 1, 2, 3],
    mutationChance: 0.1
  };

  var GeneticAlgorithm =
  /*#__PURE__*/
  function () {
    function GeneticAlgorithm(config) {
      _classCallCheck(this, GeneticAlgorithm);

      _defineProperty(this, "config", void 0);

      _defineProperty(this, "population", void 0);

      this.config = _objectSpread({}, defaultConfig, config);
      this.population = [];
    }

    _createClass(GeneticAlgorithm, [{
      key: "run",
      value: function run() {
        if (this.population.length === 0) {
          this.createInitialPopulation();
        } else {
          this.createNewGeneration(this.population);
        }

        for (var i = 0; i < this.population.length; i++) {
          this.population[i].fitness = this.config.fitnessFunction(this.population[i]);
        }

        return _toConsumableArray(this.population);
      }
    }, {
      key: "resetPopulation",
      value: function resetPopulation() {
        this.population = [];
      }
    }, {
      key: "createInitialPopulation",
      value: function createInitialPopulation() {
        var _this = this;

        this.population = _toConsumableArray(Array(this.config.populationSize)).map(function () {
          return {
            fitness: 0,
            genes: _toConsumableArray(Array(_this.config.chromosomeLength)).map(function () {
              return _this.config.possibleGenes[Math.floor(Math.random() * _this.config.possibleGenes.length)];
            })
          };
        });
      }
    }, {
      key: "createNewGeneration",
      value: function createNewGeneration(population) {
        var selectedChromosomes = this.config.selectionFunction(population);
        var offspring = this.config.crossOverFunction(selectedChromosomes);

        for (var i = 0; i < offspring.length; i++) {
          if (this.config.mutationChance >= Math.random()) {
            offspring[i] = this.config.mutationFunction(offspring[i], this.config.possibleGenes);
          }
        }

        this.population = [].concat(_toConsumableArray(selectedChromosomes), _toConsumableArray(offspring));
      }
    }]);

    return GeneticAlgorithm;
  }();

  var evolve = function evolve(config) {
    return new GeneticAlgorithm(config);
  };

  exports.GeneticAlgorithm = GeneticAlgorithm;
  exports.evolve = evolve;

  return exports;

}({}));
